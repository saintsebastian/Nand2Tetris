// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // if zx is 0 it Mux will return entire x untouched
    // else if will return 0
    Mux16(a=x, b=false, sel=zx, out=x1);

    // nx is choosing between x and notX in Mux
    Not16(in=x1, out=notX);
    Mux16(a=x1, b=notX, sel=nx, out=x2);

    // zy same as zx
    Mux16(a=y, b=false, sel=zy, out=y1);

    // ny same as nx
    Not16(in=y1, out=notY);
    Mux16(a=y1, b=notY, sel=ny, out=y2);

    // f is choosing between x+y and x&y
    Add16(a=x2, b=y2, out=addXY);
    And16(a=x2, b=y2, out=andXY);
    Mux16(a=andXY, b=addXY, sel=f, out=outF);

    // no is choosing between outF and notOutF
    // final out is produced
    Not16(in=outF, out=notOutF);
    Mux16(a=outF, b=notOutF, sel=no, out=finalOut);

    // If out>0 one of the bits is 1 and overall result is 1
    Or16Way(in=finalOut, out=ifZero);
    // If overall result is 0 zr=1;
    Xor(a=ifZero, b=true, out=zr);

    // ng is only true if out is negative
    // 16-bit number is negative when it's first (out[15]) bit is 1
    Neg16(in=finalOut, out=neg);
    And(a=neg, b=true, out=ng);

    // way around non reusable outs
    Or16(a=finalOut, b=false, out=out);
}
